# Docker Compose for CRAG Sidecar Architecture
# Lean implementation following Sonnet 4's bootstrap-friendly approach

version: '3.8'

services:
  # Main application - unchanged
  main-app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - GROQ_API_KEY=${GROQ_API_KEY}
      - UPSTASH_VECTOR_REST_URL=${UPSTASH_VECTOR_REST_URL}
      - UPSTASH_VECTOR_REST_TOKEN=${UPSTASH_VECTOR_REST_TOKEN}
      - CRAG_SIDECAR_URL=http://crag-sidecar:8001
      - CRAG_SIDECAR_ENABLED=true
    depends_on:
      - crag-sidecar
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # CRAG Sidecar - enhanced processing service
  crag-sidecar:
    build:
      context: .
      dockerfile: docker/crag-sidecar/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - SIDECAR_MODE=true
      - CACHE_SIZE=100
      - SIMILARITY_THRESHOLD=0.7
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '0.5'
        reservations:
          memory: 1G
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for shared caching (if needed for scaling)
  redis-cache:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    profiles:
      - scaling # Enable with --profile scaling

networks:
  default:
    driver: bridge
    name: crag-network

volumes:
  redis-data:
    driver: local